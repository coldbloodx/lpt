#!/usr/bin/env python

import sys

from app import LAApp
from dbitem import *
from dbman import *

class GetName(LAApp):
    def __init__(self):
        LAApp.__init__(self,debug=False)

    def parseargs(self):
        """parseargs - Parse the command line arguments and populate the
        class variables"""
        self.force_single_instance()

        self.parser.add_option("-v", "--version", action="callback",
                callback=self.showversion, help="version")
        self.parser.add_option("-g", "--nodegroup", action="store", 
                dest="ngid", help="get nodegroup name", metavar="nodegroup")
        self.parser.add_option("-n", "--node", action="store", 
                dest="nid", help="get node name", metavar="node")
        self.parser.add_option("-p", "--partschema", action="store",
                dest="schemaid", help="get partition schema name", metavar="schema")
        self.parser.add_option("--network", action="store",
                dest="netid", help="get network name", metavar="network")

        if len(sys.argv[1:]) < 1:
            self.parser.print_help()
            sys.exit(0)

        (self.options, self.args) = self.parser.parse_args(sys.argv[1:])
       
        count = 0
        for option in [bool(self.options.ngid), bool(self.options.nid), 
                bool(self.options.schemaid), bool(self.options.netid)]:
            if option:
                count = count + 1
            if count > 1:
                self.stderrmsg("only one option is allowed for this tool\n")
                sys.exit(-1)

    def run(self):
        self.parseargs()

        dbconn = ConnManager.get_session()

        if self.options.ngid:
            nodegroup =  dbconn.query(NodeGroup).filter_by(ngid=self.options.ngid).first()
            if not nodegroup:
                sys.exit(-1)

            print nodegroup.ngname
            
        elif self.options.nid:
            node = dbconn.query(Node).filter_by(nid=self.options.nid).first()
            if not node:
                sys.exit(-1)

            print node.nodename

        elif self.options.schemaid:
            schema = dbconn.query(PartSchema).filter_by(schemaid=self.options.schemaid).first()
            if not schema:
                sys.exit(-1)

            print schema.schemaname

        elif self.options.netid:
            network = dbconn.query(Network).filter_by(netid=self.options.netid).first()
            if not network:
                sys.exit(-1)

            print network.netname

        sys.exit(0)

    
if __name__ == '__main__':
    getnameapp = GetName()
    getnameapp.run()
