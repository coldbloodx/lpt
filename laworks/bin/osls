#!/usr/bin/env python

import sys

from dbitem import *
from utils import errout
from app import LAApp
from dbman  import ConnManager as DBConnManager

class LAOSLsApp(LAApp):
    def __init__(self):
        LAApp.__init__(self, debug=False)
        self.force_single_instance()
        self.cols = []
        self.vcols = [ 'osname', 'distro', 'major', 'minor', 'ostype', 'repo' ]
    
    def parse_args(self):

        self.parser.add_option("-v", "--version", action="callback",
                callback=self.showversion, help="version")

        self.parser.add_option("-c", "--column", action="store", dest="colstr", 
                help="column string, such like col1,col2", metavar="colname")
        self.parser.add_option("-o", "--osname", action="store", dest="osname", 
                help="os name", metavar="osname")
        self.parser.add_option("--valueonly", action="store_true", dest="valueonly",
                help="show values only")

        (self.options, self.args) = self.parser.parse_args(sys.argv[1:])

    def run(self):
        self.parse_args()

        cols = []
        if self.options.colstr:
            cols = self.options.colstr.split(',')

        for col in cols:
            if col not in self.vcols:
                errout("Specified column: %s is not a valid column for node group" % (col))
                sys.exit(1)
        
        self.cols = cols

        dbconn = DBConnManager.get_session()
        alloses = dbconn.query(OS).all()
        
        oses = alloses
        if self.options.osname:
            oses = [ os for os in alloses if os.osname == self.options.osname ]
            if not oses:
                errout("Can not find specified os")
                sys.exit(1)

        kvmaps = {}
        for os in oses:
            kvmap = {
                "osname"  : os.osname,
                "distro"  : os.distro,
                "major"   : os.major,
                "minor"   : os.minor,
                "ostype"  : os.ostype,
                "repo"    : os.repo
                }
            kvmaps[os.osname] = kvmap
        
        cols = self.vcols
        if self.cols:
            cols = self.cols
        
        for os in oses:
            for col in cols:
                if self.options.valueonly:
                    print kvmaps[os.osname][col]
                else:
                    print "%-8s : %s" % (col, kvmaps[os.osname][col])
            if not self.options.valueonly: print 

if __name__ == '__main__':
    oslsapp = LAOSLsApp()
    oslsapp.run()
