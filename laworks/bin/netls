#!/usr/bin/env python

import sys

from dbitem import *
from utils import errout
from app import LAApp
from dbman  import ConnManager as DBConnManager

class LANodeGroupLsApp(LAApp):
    def __init__(self):
        LAApp.__init__(self, debug=False)
        self.force_single_instance()
        self.cols = []
        self.vcols = [ 'netid', 'netname', 'network', 'netmask', 'broadcast', 'gateway', 'dns', 'drange',
                'srange', 'tftpsrv', 'nwtype',]
    
    def parse_args(self):

        self.parser.add_option("-v", "--version", action="callback",
                callback=self.showversion, help="version")

        self.parser.add_option("-c", "--column", action="store", dest="colstr", 
                help="column string, such like col1,col2", metavar="colname")
        self.parser.add_option("-n", "--netname", action="store", dest="netname", 
                help="network name", metavar="netname")
        self.parser.add_option("--valueonly", action="store_true", dest="valueonly",
                help="show values only")

        self.parser.add_option("-t", "--type", action="store", dest="nwtype", 
                help="network type", metavar="nwtype")

        (self.options, self.args) = self.parser.parse_args(sys.argv[1:])

    def run(self):
        self.parse_args()

        cols = []
        if self.options.colstr:
            cols = self.options.colstr.split(',')

        for col in cols:
            if col not in self.vcols:
                errout("Specified column: %s is not a valid column for network" % (col))
                sys.exit(1)
        
        self.cols = cols

        dbconn = DBConnManager.get_session()
        allnets = dbconn.query(Network).all()
        
        nets = allnets
        if self.options.netname:
            nets = [ net for net in allnets if net.netname == self.options.netname ]
            if not nets:
                errout("Can not find specified network")
                sys.exit(1)

        if self.options.nwtype:
            nets = [ net for net in allnets if net.nwtype == self.options.nwtype ]
            if not nets:
                errout("Can not find specified network")
                sys.exit(1)

        self.vcols = [ 'netid', 'netname', 'network', 'netmask', 'broadcast', 'gateway', 'dns', 'drange',
                'srange', 'tftpsrv', 'nwtype',]
        kvmaps = {}
        for net in nets:
            kvmap = {
                "netid"     : net.netid,
                "netname"   : net.netname,
                "network"   : net.network,
                "netmask"   : net.netmask,
                "broadcast" : net.broadcast,
                "gateway"   : net.gateway,
                "dns"       : net.dns,
                "drange"    : net.drange,
                "srange"    : net.srange,
                "tftpsrv"   : net.tftpsrv,
                "nwtype"    : net.nwtype
                }
            kvmaps[net.netname] = kvmap
        
        cols = self.vcols
        if self.cols:
            cols = self.cols
        
        for net in nets:
            for col in cols:
                if self.options.valueonly:
                    print kvmaps[net.netname][col]
                else:
                    print "%-10s : %s" % (col, kvmaps[net.netname][col])
            if not self.options.valueonly: print 

if __name__ == '__main__':
    nglsapp = LANodeGroupLsApp()
    nglsapp.run()
