#!/usr/bin/env python

import sys

from unipath.path import Path as path

from dbitem import *
from dbhelper import *
from constant import *
from app import LAApp
from dbman  import ConnManager as DBConnManager
import makeconfig

class LAMakeConfigApp(LAApp):
    
    configtype = ['dhcpd', 'tftp', 'httpd', 'hosts' ] #,'named', 'nfs', 'resolv', 'zone', 'revzone']

    def __init__(self):
        LAApp.__init__(self, debug=False)
        self.force_single_instance()

    def parseargs(self):

        config_string = ", ".join(self.configtype)

        self.parser.add_option("-v", "--version", action="callback",
                callback=self.showversion, help="version")
        self.parser.add_option("-t", "--type", action="store", 
                dest="configtype", help="config type: %s " % (config_string), metavar="type")

        if len(sys.argv[1:]) < 1:
            self.parser.print_help()
            sys.exit(0)

        (self.options, self.args) = self.parser.parse_args(sys.argv[1:])

        if self.options.configtype not in self.configtype:
            self.stderrmsg("config type must in %s" % (config_string))
            sys.exit(-1)

    def run(self):
        self.parseargs()

        dbconn = DBConnManager.get_session()

        if not dbconn:
            self.stderrmsg("Database connection error")
            sys.exit(-1)
        
        funptr = getattr(makeconfig, "make%s" % (self.options.configtype))
        ret = funptr(dbconn)
        if ret:
            print ret
        sys.exit(0)

if __name__ == '__main__':
    makeconfigapp = LAMakeConfigApp()
    makeconfigapp.run()
